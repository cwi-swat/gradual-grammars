%import common.DIGIT
%import common.WS_INLINE
%import common.NEWLINE
%import common.SIGNED_INT -> NUMBER
ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/ -> idstart

ID_CONTINUE: ID_START | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}Â·]+/ -> idcontinue

Prog: Command+ -> cmds

_WS: " "* -> _WS

ListAccess: var  "at"  (index | random) -> list_access

Command: "forward"  (number | ListAccess | textwithoutspaces) -> forward
	| "turn"  (list_access | textwithoutspaces) -> turn
	| "ken"  var  "aan"  text  "toe" -> assign
	| var  "is"  (text_list  (","  text_list)+) -> assign_list
	| (text_list  (","  text_list)*)? -> dummy
	| "print"  (ListAccess | quoted_text | var_access)* -> print
	| var  "is"  "ask"  (ListAccess | quoted_text | var_access) -> ask
	| "if"  Condition  Command -> if
	| "if"  Condition  Command  "else"  Command -> ifelse
	| text -> invalid_space // error production
	| textwithoutspaces  text? -> invalid // error production
	| "print"  text -> print_nq // error production
	| var  "is"  "as"  (ListAccess | textwithoutspaces | punctuation) -> ask_nq // error production

Condition: textwithoutspaces  "is"  textwithoutspaces  ("and"  condition)* -> is
	| textwithoutspaces  "in"  var  ("and"  condition)* -> in
