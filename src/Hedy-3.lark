%import common.DIGIT
%import common.WS_INLINE
%import common.NEWLINE
%import common.SIGNED_INT -> NUMBER
ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/ -> idstart

ID_CONTINUE: ID_START | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}Â·]+/ -> idcontinue

Prog: Command+ -> cmds

_WS: " "* -> _WS

ListAccess: var _WS "at" _WS (index | random) -> list_access

Command: text -> invalid_space
	| textwithoutspaces _WS text? -> invalid
	| "forward" _WS (number | ListAccess | textwithoutspaces) -> forward
	| "turn" _WS (list_access | textwithoutspaces) -> turn
	| var _WS "is" _WS text -> assign
	| var _WS "is" _WS (text_list _WS ("," _WS text_list)+) -> assign_list
	| "print" _WS (ListAccess | quoted_text | var_access)* -> print
	| var _WS "is" _WS "ask" _WS (ListAccess | quoted_text | var_access) -> ask
	| "print" _WS text -> print_nq
	| var _WS "is" _WS "as" _WS (ListAccess | textwithoutspaces | punctuation) -> ask_nq
