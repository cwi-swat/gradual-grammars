%import common.NUMBER -> NUMBER
%import common.SIGNED_INT -> INT
_SPACE: " "+

_COMMA: _SPACE? ("," | "ØŒ") _SPACE?

start: program

echo: "echo" (_SPACE text)?

error_invalid_space: _SPACE text?

comment: "#" /([^\n]+)/

_EOL: "\r"? "\n"

NAME: ID_START ID_CONTINUE*

ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/

ID_CONTINUE: ID_START
  | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}Â·]+/

_END_BLOCK: "end-block"

error_ask_dep_2: "ask" (_SPACE error_text_dep_2)?

error_echo_dep_2: "echo" (_SPACE error_text_dep_2)?

error_text_dep_2: /([^\n]+)/ -> text

text_ask: /([^\r\n!?.]+)/ -> text

punctuation: PUNCTUATION -> punctuation

PUNCTUATION: "!"
  | "?"
  | "."

var: NAME -> var

text_list: /([^\r\n,ØŒ]+)/ -> text

some_spaces: /([^\r\n!?. ]+)/ (_SPACE /([^\r\n!?. ]+)/)* -> text_with_spaces

var_access: NAME

print: "print" (_SPACE _print_argument)? -> print

error_ask_no_quotes: var _SPACE "is" _SPACE "ask" _SPACE text -> error_print_nq

text: /([^\n,]+)/ -> text

quoted_text_no_escape: /'([^']*)'/ -> text

quoted_text: /'((?:[^\\']|\\.)*)'/ -> text

program: _EOL* (command | error_invalid) (_SPACE)* (_EOL+ (command | error_invalid) (_SPACE)*)* _EOL*

list_access_var: var _SPACE "is" _SPACE var _SPACE "at" _SPACE (INT | random)

assign_list: var _SPACE "is" _SPACE textwithspaces (_COMMA textwithspaces)+

assign: var _SPACE "is" _SPACE textwithspaces

error_invalid: textwithoutspaces (_SPACE textwithspaces)?

error_print_no_quotes: "print" _SPACE (textwithoutspaces | list_access | var) (_SPACE (textwithoutspaces | list_access | var))* -> error_print_nq

equality_check: textwithoutspaces _SPACE "is" _SPACE textwithoutspaces (_SPACE textwithoutspaces)*

in_list_check: textwithoutspaces _SPACE "in" _SPACE var

nospace: /[^\n, ]/

textwithspaces: /(?:[^\nØŒ, ]| (?!else))+/ -> text

_print_argument: (_SPACE | quoted_text | list_access | var_access | sum)*

condition: in_list_check
  | equality_check_is
  | equality_check_equals

equality_check_is: textwithoutspaces _SPACE "is" _SPACE textwithoutspaces (_SPACE textwithoutspaces)*

equality_check_equals: textwithoutspaces "=" textwithoutspaces (_SPACE textwithoutspaces)*

list_access_var_is: var _SPACE "is" _SPACE var _SPACE "at" _SPACE (INT | random)

list_access_var_equals: var "=" var _SPACE "at" _SPACE (INT | random)

assign_list_is: var _SPACE "is" _SPACE textwithspaces (_COMMA textwithspaces)+

assign_list_equals: var "=" textwithspaces (_COMMA textwithspaces)+

assign_is: var _SPACE "is" _SPACE sum
  | var _SPACE "is" _SPACE textwithoutspaces

assign_equals: var "=" sum
  | var "=" textwithoutspaces

?sum: product
  | sum _SPACE* "+" _SPACE* product -> addition
  | sum _SPACE* "-" _SPACE* product -> subtraction

?product: atom
  | product _SPACE* "*" _SPACE* atom -> multiplication
  | product _SPACE* "/" _SPACE* atom -> division

?atom: INT
  | var_access
  | error_unsupported_number

error_unsupported_number: /([-+]?(\d+[\.,]\d+))/ -> error_unsupported_number

textwithoutspaces: /(?:[^\n, *+\-\/ei]|e(?!lse)|i(?!f))+/ -> text

repeat: "repeat" _SPACE (INT | var) _SPACE "times" _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

elses: _EOL (_SPACE)* "else" (_SPACE)* _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

command: print
  | turtle
  | add
  | remove
  | sleep
  | comment
  | list_access_var
  | ask_is
  | ask_equals
  | list_access_var_equals
  | list_access_var_is
  | assign_is
  | assign_equals
  | assign_list_is
  | assign_list_equals
  | repeat
  | ifs elses?
  | repeat_list

repeat_list: "for" _SPACE var _SPACE "in" _SPACE var _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

ask_is: var _SPACE "is" _SPACE "vraag" (_SPACE _print_argument)?

ask_equals: var "=" "vraag" (_SPACE _print_argument)?

ifelse: "als" _SPACE condition (_SPACE | _EOL*) command (_SPACE | _EOL*) "anders" (_SPACE | _EOL*) command

ifs: "if" _SPACE condition _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

random: ("willekeurig" | "random")

list_access: var _SPACE "op" _SPACE (INT | random) -> list_access

add: ("voeg" | "add") _SPACE some_spaces _SPACE ("toe aan" | "to") _SPACE var

remove: ("verwijder" | "remove") _SPACE some_spaces _SPACE ("uit" | "from") _SPACE var

ask: var _SPACE "is" _SPACE "vraag" (_SPACE _print_argument)?

sleep: ("slaap" | "sleep") (_SPACE INT)?

turtle: ("vooruit" | "forward") (_SPACE (INT | list_access | textwithoutspaces))? -> forward
  | ("draai" | "turn") (_SPACE (list_access | textwithoutspaces))? -> turn
