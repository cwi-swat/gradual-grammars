%import common.NUMBER -> NUMBER
%import common.SIGNED_INT -> INT
_SPACE: " "+

_COMMA: _SPACE? ("," | "،") _SPACE?

start: program

program: _EOL* (command _EOL+)* command?

echo: "echo" (_SPACE text)?

error_invalid_space: _SPACE text?

error_invalid: textwithoutspaces text?

comment: "#" /([^\n]+)/

_EOL: "\r"? "\n"

NAME: ID_START ID_CONTINUE*

ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/

ID_CONTINUE: ID_START
  | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}·]+/

_END_BLOCK: "end-block"

print: "print" (_SPACE _print_argument)?

ask: var _SPACE "is" _SPACE "ask" (_SPACE+ (_SPACE | text_ask | punctuation)*)?

error_ask_dep_2: "ask" (_SPACE error_text_dep_2)?

error_echo_dep_2: "echo" (_SPACE error_text_dep_2)?

error_text_dep_2: /([^\n]+)/ -> text

sleep: "sleep" (_SPACE INT)?

textwithoutspaces: /([^\r\n!?. ]+)/ -> text

text: /([^\r\n,!?،.]+)/ -> text

text_ask: /([^\r\n!?.]+)/ -> text

punctuation: PUNCTUATION -> punctuation

PUNCTUATION: "!"
  | "?"
  | "."

var: NAME -> var

command: print
  | ask
  | turtle
  | error_invalid_space
  | comment
  | assign
  | error_ask_dep_2
  | error_echo_dep_2
  | sleep
  | assign_list
  | add
  | remove
  | error_invalid

_print_argument: (_SPACE | list_access | textwithoutspaces | punctuation)*

assign: var _SPACE "is" _SPACE (list_access | text) -> assign

assign_list: var _SPACE "is" _SPACE text_list (_COMMA text_list)+

text_list: /([^\r\n,،]+)/ -> text

random: "random"

list_access: var _SPACE "at" _SPACE (INT | random) -> list_access

turtle: "forward" (_SPACE (INT | list_access | textwithoutspaces))? -> forward
  | "turn" (_SPACE (list_access | textwithoutspaces))? -> turn

some_spaces: /([^\r\n!?. ]+)/ (_SPACE /([^\r\n!?. ]+)/)* -> text_with_spaces

add: "add" _SPACE some_spaces _SPACE "to" _SPACE var

remove: "remove" _SPACE some_spaces _SPACE "from" _SPACE var
