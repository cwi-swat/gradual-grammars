%import common.NUMBER -> NUMBER
%import common.SIGNED_INT -> INT
_SPACE: " "+ -> 

_COMMA: _SPACE?  ("," | "ØŒ")  _SPACE? -> 

_EQUALS: _SPACE?  "="  _SPACE? -> 

start: _EOL*  (command  _EOL+)*  command? -> program

_EOL: "\r"?  "\n" -> 

NAME: ID_START  ID_CONTINUE* -> 

ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/ -> 

ID_CONTINUE: ID_START -> 
	| /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}Â·]+/ -> 

_END_BLOCK: "end-block" -> 

command: _PRINT  (_SPACE  _print_argument)? -> print
	| var  _SPACE  _IS  _SPACE  _ASK  (_SPACE+  (_SPACE | text_ask | punctuation)*)? -> ask
	| turtle -> turtle
	| _HASH  /([^\n]+)/ -> comment
	| var  _SPACE  _IS  _SPACE  text -> assign
	| _SLEEP  (_SPACE  INT)? -> sleep
	| _SPACE  text? -> invalid_space // error production
	| textwithoutspaces  text? -> invalid // error production
	| _ASK  (_SPACE  error_text_dep_2)? -> ask_dep_2 // error production
	| _ECHO  (_SPACE  error_text_dep_2)? -> echo_dep_2 // error production
	| /([^\n]+)/ -> text // error production

turtle: _FORWARD  (_SPACE  (INT | textwithoutspaces))? -> forward
	| _TURN  (_SPACE  (textwithoutspaces))? -> turn

_print_argument: (_SPACE | textwithoutspaces | punctuation)* -> print_arg

textwithoutspaces: /([^\r\n!?. ]+)/ -> text

text: /([^\r\n,!?ØŒ.]+)/ -> text

text_ask: /([^\r\n!?.]+)/ -> text

punctuation: PUNCTUATION -> punctuation

PUNCTUATION: _EXCLAMATION_MARK -> 
	| _QUESTION_MARK -> 
	| _PERIOD -> 

var: NAME -> var
