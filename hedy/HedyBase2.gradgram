module Hedy

import common.NUMBER -> NUMBER
import common.SIGNED_INT -> INT

prefix "level"

level 1

_SPACE =  " "+

_COMMA = _SPACE? (","|"،") _SPACE? //support latin and arabic comma;s and always allow these to be surrounded by spaces


start = program
program = _EOL* (command _EOL+)* command?
command = print | ask | echo | turtle | error_invalid_space | comment | error_invalid

print = "print" (_SPACE text)?
ask = "ask" (_SPACE text)?
echo = "echo" (_SPACE text)?
turtle = "forward" (_SPACE (text | NUMBER))? -> forward | "turn" (_SPACE text)? -> turn
error_invalid_space = _SPACE text?
error_invalid = textwithoutspaces text?

comment = "#" /([^\n]+)/

_EOL = "\r"?"\n"

text = /([^\n]+)/ -> text //anything can be parsed except for a newline
textwithoutspaces = /([^\n *+-\/]+)/ -> text //anything can be parsed except for spaces (plus: a newline)

// FH Sept 2021: More info on this variable format: https://www.unicode.org/reports/tr31/tr31-1.html
// Exact grammar stolen from: https://lark-parser.readthedocs.io/en/latest/classes.html

NAME = ID_START ID_CONTINUE*
ID_START = /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/
ID_CONTINUE = ID_START | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}·]+/

// Internal symbol added by the preprocess_blocks function to indicate the end of blocks
_END_BLOCK = "end-block"

level 2

//add the rules after += remove those after -= and the ones after > should be at the end
command += assign | error_ask_dep_2 | error_echo_dep_2 | sleep 
        -= echo 
        > error_invalid
        
       
      
print = "print" (_SPACE _print_argument)?
_print_argument = (_SPACE | textwithoutspaces | punctuation)*
ask = var _SPACE "is" _SPACE "ask" (_SPACE + (_SPACE | text_ask | punctuation)*)?

//level 1 deprecated commands, for now manually added for better errors
error_ask_dep_2 = "ask" (_SPACE error_text_dep_2)?
error_echo_dep_2 = "echo" (_SPACE error_text_dep_2)?
//text is also changed and these commands of course need the old text
error_text_dep_2 = /([^\n]+)/ -> text //anything can be parsed except for a newline

//sleep
sleep = "sleep" (_SPACE INT)?

//in level 2, forward may also depend on a variable
turtle = "forward" (_SPACE (INT | textwithoutspaces))? -> forward 
       | "turn" (_SPACE (textwithoutspaces))? -> turn
assign = var _SPACE "is" _SPACE text -> assign

//in Level 2 we need to treat punctuation differently, since it can be used to separate arguments (variables)
textwithoutspaces = /([^\r\n!?. ]+)/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)
text = /([^\r\n,!?،.]+)/ -> text //todo FH, feb 2022 this can go to level 3 cause in (the new) level 2 it is allowed to have commas, lists are now introduced in level 2

text_ask = /([^\r\n!?.]+)/ -> text //as ask may contain commas (punctionation is still needed separately so they can be printed after vars)

punctuation = PUNCTUATION -> punctuation
PUNCTUATION = "!" | "?" | "." //uppercase places tokens in tree

var = NAME -> var

level 3

command += assign_list | add | remove > error_invalid   
_print_argument = (_SPACE | list_access | textwithoutspaces | punctuation)*

assign = var _SPACE "is" _SPACE (list_access | text) -> assign
assign_list = var _SPACE "is" _SPACE text_list (_COMMA text_list)+
text_list = /([^\r\n,،]+)/ -> text // list elements may contain punctuation but not commas or course, these are separators

random = "random"

list_access = var _SPACE "at" _SPACE (INT | random) -> list_access //todo: could be merged with list_access_var?
turtle = "forward" (_SPACE (INT | list_access | textwithoutspaces))? -> forward 
  | "turn" (_SPACE (list_access | textwithoutspaces))? -> turn

// FH, jan 22: not exactly sure why this works, while textwithoutspaces parses the whole line in add/remove
// leaving this for now
some_spaces = /([^\r\n!?. ]+)/ (_SPACE /([^\r\n!?. ]+)/)* -> text_with_spaces

add = "add" _SPACE some_spaces _SPACE "to" _SPACE var
remove = "remove" _SPACE some_spaces _SPACE "from" _SPACE var

level 4

// redifining it entirely since it has many order-depending rules (e.g ask_no_quotes should be after ask and before assign)
command = print | ask | turtle | assign_list | add | remove | sleep | error_ask_no_quotes| assign | error_print_no_quotes | comment | error_invalid

// we need a separate rule for a var when used in a print argument
// it parses the same, but should not be counted towards lookup table creation
var_access = NAME

print = "print" (_SPACE _print_argument)? -> print
error_print_no_quotes = "print" _SPACE text -> error_print_nq
ask = var _SPACE "is" _SPACE "ask" (_SPACE _print_argument)?
error_ask_no_quotes = var _SPACE "is" _SPACE "ask" _SPACE text  -> error_print_nq

_print_argument = (_SPACE | list_access | quoted_text | var_access)*

//anything can be parsed except for spaces, and a newlines and commas for list separators
textwithoutspaces = /([^\r\n, *+-\/]+)/ -> text

//anything can be parsed except for a newline and a comma for list separators
//punctuation does not need to be treated differently anymore
text = /([^\n,]+)/ -> text

quoted_text_no_escape = /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
quoted_text = /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \

level 5

program = _EOL* (command | error_invalid) (_SPACE)* (_EOL+ (command | error_invalid) (_SPACE)*)* _EOL* //lines may end on spaces and might be separated by many newlines
//placing assing at the end
command += ifelse | ifs  |  list_access_var 
        -= error_invalid | error_ask_no_quotes 
        > assign

//placing assign after print means print is will print 'is' and print is Felienne will print 'is Felienne'

//todo: list_access_var can be merged with var? would simplify rewriting a bit, some duplication now in processing
list_access_var = var _SPACE "is" _SPACE var _SPACE "at" _SPACE (INT | random)

assign_list = var _SPACE "is" _SPACE textwithspaces (_COMMA textwithspaces)+
assign = var _SPACE "is" _SPACE textwithspaces
// Why are we redefining this rule if it's not used in further levels? JP Dec-2021
error_invalid = textwithoutspaces (_SPACE textwithspaces)?

error_print_no_quotes = "print" _SPACE (textwithoutspaces | list_access | var) (_SPACE (textwithoutspaces | list_access | var))*  -> error_print_nq

// new commands for level 4
ifelse = "if" _SPACE condition (_SPACE|_EOL*) command (_SPACE|_EOL*) "else" (_SPACE|_EOL*) command
ifs = "if" _SPACE condition (_SPACE|_EOL*) command //'if' cannot be used in Python, hence the name of the rule is 'ifs'
condition = equality_check | in_list_check

equality_check = textwithoutspaces _SPACE "is" _SPACE textwithoutspaces (_SPACE textwithoutspaces)* //TODO FH nov 2021: not super pretty that this is textwithoutquotes for both a var and also a textual constant, level 12 handles this nicer now, could be done here too
in_list_check = textwithoutspaces _SPACE "in" _SPACE var

nospace = /[^\n, ]/

textwithspaces = /(?:[^\n،, ]| (?!else))+/ -> text //anything can be parsed except for a newline and a comma for list separators
//a space is allowed, of course but it may not be followed by an else. The part " (?!else))" means space not followed by (negative look ahead) else
//That is because allowing else in strings leads to issue #303
textwithoutspaces = /(?:[^\n،, ei]|e(?!lse)|i(?!f))+/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)
//the part e(?!lse)|i(?!f)) means e not followed by lse, and i not followed by f
// this is because allowing else and if in invalid leads to ambiguity in the grammar                                            

level 6

_print_argument = (_SPACE | quoted_text | list_access | var_access | sum)*

//splitting  these commands into two rules, one for equals and one for is so they can be properly handled in the translator
command += ask_is | ask_equals | list_access_var_equals | list_access_var_is | assign_is | assign_equals | assign_list_is | assign_list_equals 
        -= ask | list_access | assign | assign_list

ask_is = var _SPACE "is" _SPACE "ask" (_SPACE _print_argument)?
ask_equals = var "=" "ask" (_SPACE _print_argument)?

condition += equality_check_is | equality_check_equals 
          -= equality_check

equality_check_is = textwithoutspaces _SPACE "is" _SPACE textwithoutspaces (_SPACE textwithoutspaces)*
equality_check_equals = textwithoutspaces "=" textwithoutspaces (_SPACE textwithoutspaces)*

list_access_var_is = var _SPACE "is" _SPACE var _SPACE "at" _SPACE (INT | random)
list_access_var_equals = var "=" var _SPACE "at" _SPACE (INT | random)

assign_list_is = var _SPACE "is" _SPACE textwithspaces (_COMMA textwithspaces)+
assign_list_equals = var "=" textwithspaces (_COMMA textwithspaces)+

assign_is = var _SPACE "is" _SPACE sum | var _SPACE "is" _SPACE textwithoutspaces
assign_equals = var "=" sum | var "=" textwithoutspaces

?sum =  product | sum _SPACE* "+" _SPACE* product -> addition 
   | sum _SPACE* "-" _SPACE* product -> subtraction

?product = atom | product _SPACE* "*" _SPACE* atom -> multiplication 
  | product _SPACE* "/" _SPACE* atom -> division
  
?atom = INT | var_access | error_unsupported_number //TODO: means we cannot assign strings with spaces? would we want that?
error_unsupported_number = /([-+]?(\d+[\.,]\d+))/ -> error_unsupported_number

textwithoutspaces = /(?:[^\n, *+\-\/ei]|e(?!lse)|i(?!f))+/ -> text //new cause in level 5 calculation elements need to be escaped too                

level 7

command += repeat -= error_print_no_quotes

//new in level 6
repeat = "repeat" _SPACE (INT | var) _SPACE "times" _SPACE command

level 8

command += ifs elses? 
  -= ifelse| ifs
//placing assign at the end means print is will print 'is' and print is Felienne will print 'is Felienne'

repeat = "repeat" _SPACE (INT | var) _SPACE "times" _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

// from level 8 on if is implemented slightly differently
elses = _EOL (_SPACE)* "else" (_SPACE)* _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK
//'if' cannot be used in Python, hence the name of the rule is 'ifs'
ifs = "if" _SPACE condition _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK


level 9

level 10

command += repeat_list

//TODO: Maybe this should be called for_list instead of repeat_list? I find thi a bit confusing myself (FH, Nov 2021)
repeat_list = "for" _SPACE var _SPACE "in" _SPACE var _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

level 11

command += for_loop -= repeat | turtle

//new : for loop
for_loop = "for" _SPACE (NAME | var) _SPACE "in" _SPACE "range" _SPACE (INT | var) _SPACE "to" _SPACE (INT | var) _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK


level 12

//assigning a string now must be done with quotes
assign_is = var _SPACE "is" _SPACE sum | var _SPACE "is" _SPACE text_in_quotes
assign_equals = var "=" sum | var "=" text_in_quotes

assign_list_is = var _SPACE "is" _SPACE (text_in_quotes|NUMBER) (_COMMA (text_in_quotes|NUMBER))+
assign_list_equals = var "=" (text_in_quotes|NUMBER) (_COMMA (text_in_quotes|NUMBER))+

?atom = NUMBER | var //unsupported numbers are gone, we can now allow floats with NUMBER

equality_check_is = (var | text_in_quotes | NUMBER) _SPACE "is" _SPACE (var | text_in_quotes | NUMBER)
equality_check_equals = (var | text_in_quotes | NUMBER) "=" (var | text_in_quotes | NUMBER)

in_list_check = (var | text_in_quotes | NUMBER) _SPACE "in" _SPACE var

error_invalid = "Supercalifragilisticexpialidocious" //invalid node should be deleted but this probably never matches anything :D
textwithspaces = /(?:[^\n,' ]| (?!else))+/ -> text //anything can be parsed except for a newline and a comma for list separators, and now single quotes
text_in_quotes = "'" textwithspaces "'"


level 13

ifs = "if" _SPACE (condition|andcondition|orcondition) _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK //'if' cannot be used in Python, hence the name of the rule is 'ifs'

andcondition = (condition) (_SPACE "and" _SPACE condition)*
orcondition = (condition) (_SPACE "or" _SPACE condition)*

level 14

// adds comparisons

condition += equality_check_dequals | smaller | bigger | not_equal | smaller_equal | bigger_equal

equality_check_is = comparison_arg _SPACE? "is" _SPACE? comparison_arg
equality_check_equals = comparison_arg "=" comparison_arg
equality_check_dequals = comparison_arg _SPACE? "==" _SPACE? comparison_arg
smaller = comparison_arg _SPACE? "<" _SPACE? comparison_arg
bigger = comparison_arg _SPACE? ">" _SPACE? comparison_arg
smaller_equal = comparison_arg _SPACE? "<=" _SPACE? comparison_arg
bigger_equal = comparison_arg _SPACE? ">=" _SPACE? comparison_arg
not_equal = comparison_arg _SPACE? "!=" _SPACE? comparison_arg

?comparison_arg = var | text_in_quotes | NUMBER

level 15

// adds the while loop


command += while_loop

while_loop = "while" _SPACE (condition) _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

level 16

// adds list access with numbers and brackets

// TODO for tomorrow: this stills needs tests in level 16 for > and !=
?comparison_arg = var | text_in_quotes | NUMBER | list_access

?atom = NUMBER | var | list_access | error_unsupported_number
list_access = var "[" (INT | random | var) "]"
change_list_item = var "[" (INT | var) "]" "=" (var | textwithoutspaces)
assign_list_is = var _SPACE "is" _SPACE "[" (quoted_text | INT) (_COMMA (quoted_text | INT))+ "]"
assign_list_equals = var "=" "[" (quoted_text | INT) (_COMMA (quoted_text | INT))+ "]"

level 17

command += ifs (elifs)* elses? -= ifs elses?

//spaces are allowed before and after colon
//TODO: this could be an attribute on the rule that we add in the merger
_COLON = _SPACE* ":" _SPACE*

elses = _EOL _SPACE* "else" _COLON _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK
//TODO: after condition a space (or more) could also be ok? Python allows that

ifs = "if" _SPACE (condition|andcondition|orcondition) ":" _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK//'if' cannot be used in Python, hence the name of the rule is 'ifs'

// TODO: FH, jan 2022 (condition|andcondition|orcondition) could be made into a rule (also in use in level 13)
elifs = _EOL _SPACE* "elif" _SPACE (condition|andcondition|orcondition) _COLON _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

for_loop = "for" _SPACE (NAME | var) _SPACE "in" _SPACE "range" _SPACE (INT | var) _SPACE "to" _SPACE (INT | var) _COLON _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

while_loop = "while" _SPACE (condition) _COLON _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK


repeat_list = "for" _SPACE var _SPACE "in" _SPACE var _COLON _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK

level 18

// adds round brackets in print() and range(), and changes ask to input

command += input_is | input_equals | input_is_empty_brackets |  input_equals_empty_brackets | print_empty_brackets 
  -= ask > assign_is | assign_equals

print = "print" (_SPACE* "(" _SPACE* (quoted_text | list_access | var_access | sum) (_COMMA (quoted_text | list_access | var_access | sum))* _SPACE* ")" _SPACE*)?

print_empty_brackets = "print" _SPACE* "(" _SPACE* ")"
input_is_empty_brackets = var _SPACE "is" _SPACE "input" _SPACE* ("(" _SPACE? ")")
input_equals_empty_brackets = var _SPACE* "=" _SPACE* "input" _SPACE* ("(" _SPACE* ")")
input_is = var _SPACE "is" _SPACE "input" _SPACE* ("("  ((quoted_text | list_access | var_access | sum) (_SPACE (quoted_text | list_access | var_access | sum))*) ")")?
input_equals = var _SPACE* "=" _SPACE* "input" _SPACE* ("("  ((quoted_text | list_access | var_access | sum) (_SPACE (quoted_text | list_access | var_access | sum))*) ")")?

// todo: some of these vars sould alse be var_access (things that do not define like the loop var)
for_loop = "for" _SPACE (NAME | var) _SPACE "in" _SPACE "range" "(" (NUMBER | var) _COMMA (NUMBER | var) (_COMMA (NUMBER | var))? ")" _COLON _EOL (_SPACE command) (_EOL _SPACE command)* _EOL _END_BLOCK





