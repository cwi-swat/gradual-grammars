module Hedy

import common.NUMBER -> NUMBER
import common.SIGNED_INT -> INT


level 1

_SPACE =  " "+
_COMMA = _SPACE? (","|"،") _SPACE? //support latin and arabic comma;s and always allow these to be surrounded by spaces
_EQUALS = _SPACE? "=" _SPACE? //always allow = to be surrounded by spaces

start = program: _EOL* (command _EOL+)* command?

command  
  = print: _PRINT (_SPACE text)?
  | ask: _ASK (_SPACE text)?
  | echo: _ECHO (_SPACE text)?
  | turtle: turtle 
  | comment: _HASH /([^\n]+)/
  | @error invalid_space: _SPACE text?
  | @error invalid: textwithoutspaces text?

turtle 
  = forward: _FORWARD (_SPACE (text | NUMBER))?
  | turn: _TURN (_SPACE text)?

_EOL = "\r"?"\n"

text = text: /([^\n]+)/  //anything can be parsed except for a newline

textwithoutspaces = text: /([^\n *+-\/]+)/  //anything can be parsed except for spaces (plus: a newline)

// FH Sept 2021: More info on this variable format: https://www.unicode.org/reports/tr31/tr31-1.html
// Exact grammar stolen from: https://lark-parser.readthedocs.io/en/latest/classes.html

NAME = ID_START ID_CONTINUE*
ID_START = /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/
ID_CONTINUE = ID_START | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}·]+/

// Internal symbol added by the preprocess_blocks function to indicate the end of blocks
_END_BLOCK = "end-block"

level 2

remove echo

command 
  = assign: var _SPACE _IS _SPACE text  
  | @override print: _PRINT (_SPACE _print_argument)?
  | @override ask: var _SPACE _IS _SPACE _ASK (_SPACE + (_SPACE | text_ask | punctuation)*)?
  | sleep: _SLEEP (_SPACE INT)?
  | @error ask_dep_2: _ASK (_SPACE error_text_dep_2)?
  | @error echo_dep_2: _ECHO (_SPACE error_text_dep_2)?
  | @error text_dep_2: /([^\n]+)/ -> text //anything can be parsed except for a newline
  

turtle
  = @override forward: _FORWARD (_SPACE (INT | textwithoutspaces))? 
  | @override turn: _TURN (_SPACE (textwithoutspaces))? -> turn

_print_argument = (_SPACE | textwithoutspaces | punctuation)*

textwithoutspaces = 
  @override text: /([^\r\n!?. ]+)/  //anything can be parsed except for spaces (plus: a newline and a comma for list separators)

text = @override text: /([^\r\n,!?،.]+)/  //todo FH, feb 2022 this can go to level 3 cause in (the new) level 2 it is allowed to have commas, lists are now introduced in level 2

text_ask = text: /([^\r\n!?.]+)/ //as ask may contain commas (punctionation is still needed separately so they can be printed after vars)

punctuation = punctuation: PUNCTUATION 
PUNCTUATION =  _EXCLAMATION_MARK | _QUESTION_MARK | _PERIOD //uppercase places tokens in tree

var = var: NAME 

