%import common.NUMBER -> NUMBER
%import common.SIGNED_INT -> INT
_SPACE: " "+ -> 

_COMMA: _SPACE?  ("," | "،")  _SPACE? -> 

_EQUALS: _SPACE?  "="  _SPACE? -> 

start: _EOL*  (command  _EOL+)*  command? -> program

_EOL: "\r"?  "\n" -> 

NAME: ID_START  ID_CONTINUE* -> 

ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/ -> 

ID_CONTINUE: ID_START -> 
	| /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}·]+/ -> 

_END_BLOCK: "end-block" -> 

text_ask: /([^\r\n!?.]+)/ -> text

punctuation: PUNCTUATION -> punctuation

PUNCTUATION: _EXCLAMATION_MARK -> 
	| _QUESTION_MARK -> 
	| _PERIOD -> 

var: NAME -> var

text_list: /([^\r\n,،]+)/ -> text

list_access: var  _SPACE  _AT  _SPACE  (INT | random) -> list_access

turtle: _FORWARD  (_SPACE  (INT | list_access | textwithoutspaces))? -> forward
	| _TURN  (_SPACE  (list_access | textwithoutspaces))? -> turn

some_spaces: /([^\r\n!?. ]+)/  (_SPACE  /([^\r\n!?. ]+)/)* -> text_with_spaces

_print_argument: (_SPACE | list_access | quoted_text | var_access)* -> print_arg

var_access: NAME -> 

text: /([^\n,]+)/ -> text

quoted_text_no_escape: /'([^']*)'/ -> text

quoted_text: /'((?:[^\\']|\\.)*)'/ -> text

program: _EOL*  (command | error_invalid)  (_SPACE)*  (_EOL+  (command | error_invalid)  (_SPACE)*)*  _EOL*  remove  error_invalid -> 

command: _PRINT  (_SPACE  _print_argument)? -> print
	| var  _SPACE  _IS  _SPACE  _ASK  (_SPACE  _print_argument)? -> ask
	| turtle -> turtle
	| _HASH  /([^\n]+)/ -> comment
	| var  _SPACE  _IS  _SPACE  (list_access | text) -> assign
	| _SLEEP  (_SPACE  INT)? -> sleep
	| var  _SPACE  _IS  _SPACE  text_list  (_COMMA  text_list)+ -> assign_list
	| _ADD_LIST  _SPACE  some_spaces  _SPACE  _TO_LIST  _SPACE  var -> add
	| _REMOVE  _SPACE  some_spaces  _SPACE  _FROM  _SPACE  var -> remove
	| _IF  _SPACE  condition  (_SPACE | _EOL*)  command  (_SPACE | _EOL*)  _ELSE  (_SPACE | _EOL*)  command -> ifelse
	| _IF  _SPACE  condition  (_SPACE | _EOL*)  command -> ifs
	| var  _SPACE  _IS  _SPACE  var  _SPACE  _AT  _SPACE  (INT | random) -> list_access_var
	| var  _SPACE  _IS  _SPACE  textwithspaces  (_COMMA  textwithspaces)+ -> assign_list
	| var  _SPACE  _IS  _SPACE  textwithspaces -> assign
	| _SPACE  text? -> invalid_space // error production
	| textwithoutspaces  text? -> invalid // error production
	| _ASK  (_SPACE  error_text_dep_2)? -> ask_dep_2 // error production
	| _ECHO  (_SPACE  error_text_dep_2)? -> echo_dep_2 // error production
	| /([^\n]+)/ -> text // error production
	| var  _SPACE  _IS  _SPACE  _ASK  _SPACE  text -> error_print_nq // error production
	| _PRINT  _SPACE  text -> error_print_nq // error production
	| textwithoutspaces  (_SPACE  textwithspaces)? -> invalid // error production
	| _PRINT  _SPACE  (textwithoutspaces | list_access | var)  (_SPACE  (textwithoutspaces | list_access | var))* -> error_print_nq // error production

condition: textwithoutspaces  _SPACE  _IS  _SPACE  textwithoutspaces  (_SPACE  textwithoutspaces)* -> equality_check
	| textwithoutspaces  _SPACE  _IN  _SPACE  var -> in_list_check

nospace: /[^\n, ]/ -> 

textwithspaces: /(?:[^\n،, ]| (?!else))+/ -> text

textwithoutspaces: /(?:[^\n،, ei]|e(?!lse)|i(?!f))+/ -> text
