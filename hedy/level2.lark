%import common.NUMBER -> NUMBER
%import common.SIGNED_INT -> INT
_SPACE: " "+

_COMMA: _SPACE? ("," | "ØŒ") _SPACE?

start: program

program: _EOL* (command _EOL+)* command?

echo: "echo" (_SPACE text)?

error_invalid_space: _SPACE text?

error_invalid: textwithoutspaces text?

comment: "#" /([^\n]+)/

_EOL: "\r"? "\n"

NAME: ID_START ID_CONTINUE*

ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/

ID_CONTINUE: ID_START
  | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}Â·]+/

_END_BLOCK: "end-block"

command: print
  | ask
  | turtle
  | error_invalid_space
  | comment
  | assign
  | error_ask_dep_2
  | error_echo_dep_2
  | sleep
  | error_invalid

print: "print" (_SPACE _print_argument)?

_print_argument: (_SPACE | textwithoutspaces | punctuation)*

ask: var _SPACE "is" _SPACE "ask" (_SPACE+ (_SPACE | text_ask | punctuation)*)?

error_ask_dep_2: "ask" (_SPACE error_text_dep_2)?

error_echo_dep_2: "echo" (_SPACE error_text_dep_2)?

error_text_dep_2: /([^\n]+)/ -> text

sleep: "sleep" (_SPACE INT)?

turtle: "forward" (_SPACE (INT | textwithoutspaces))? -> forward
  | "turn" (_SPACE (textwithoutspaces))? -> turn

assign: var _SPACE "is" _SPACE text -> assign

textwithoutspaces: /([^\r\n!?. ]+)/ -> text

text: /([^\r\n,!?ØŒ.]+)/ -> text

text_ask: /([^\r\n!?.]+)/ -> text

punctuation: PUNCTUATION -> punctuation

PUNCTUATION: "!"
  | "?"
  | "."

var: NAME -> var
