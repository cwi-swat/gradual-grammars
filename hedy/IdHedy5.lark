%import common.NUMBER -> NUMBER
%import common.SIGNED_INT -> INT
_SPACE: " "+

start: program

comment: "#" /([^\n]+)/

NAME: ID_START ID_CONTINUE*

ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/

ID_CONTINUE: ID_START
  | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}·]+/

_END_BLOCK: "end-block"

WS: _SPACE?

color: "black"
  | "blue"
  | "brown"
  | "gray"
  | "green"
  | "orange"
  | "pink"
  | "purple"
  | "red"
  | "white"
  | "yellow"

list_access: NAME "at" (INT | "random")

text_ask: /([^\n!?.]+)/ -> text

text_list: /([^\n,،，]+)/ -> text

some_spaces: /([^\r\n!?. ]+)/ (_SPACE /([^\r\n!?. ]+)/)* -> text

_print_argument: (list_access | quoted_text | NAME)* -> arg

text: /([^\n،,，]+)/ -> text

quoted_text: (/'((?:[^\\']|\\.)*)'/ | /"((?:[^\\"]|\\.)*)"/) -> text

program: "\n"* (command "\n"+)* command?

command_with_ifs: command -> command_no_ifs
  | "if" condition command -> ifelse
  | "if" condition command "else" command -> ifs
  | NAME "is" NAME "at" (INT | random) -> list_access_var

command: "print" _print_argument? -> print
  | NAME "is" "ask" _print_argument? -> ask
  | "forward" (NUMBER | list_access | textwithoutspaces)? -> forward
  | "turn" (NUMBER | list_access | textwithoutspaces)? -> turn
  | NAME "is" textwithspaces -> assign
  | "sleep" (INT | list_access | var_access)? -> sleep
  | "color" (color | list_access | textwithoutspaces)? -> color
  | "add" some_spaces "to" NAME -> add
  | "remove" some_spaces "form" NAME -> remove
  | NAME "is" textwithspaces+ -> assign_list
  | text? -> error_invalid_space // error production
  | error_invalid // error production
  | "ask" text? -> error_ask_dep_2 // error production
  | "echo" text? -> error_echo_dep_2 // error production
  | error_invalid // error production
  | "print" (textwithoutspaces | list_access | NAME)* -> error_print_no_quotes // error production

condition: (textwithoutspaces | INT) "is" (quoted_text | textwithoutspaces | INT) -> equality_check
  | textwithoutspaces "in" var_access -> in_list_check
  | textwithoutspaces "is" textwithoutspaces (_SPACE textwithoutspaces)+ -> condition_spaces

textwithoutspaces: /(?:[^#\n،,， *+\-\/eiasbअ否אو]|א(?!חרת )|و(?!إلا )|否(?!则 )|अ(?!न्यथा )|b(?!aşka )|e(?!lse |llers )|s(?!inon |enão |ino )|i(?!naczej )|a(?!nders |lie |ltrimenti ))+/ -> text
